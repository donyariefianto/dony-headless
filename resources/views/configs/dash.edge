<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Form Builder Renderer</title>
  <link rel="stylesheet" href="/resources/configs/index.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    .form-wrapper { padding: 2rem; max-width: 800px; margin: auto; }
    .form-group { margin-bottom: 1rem; }
    .subform-container { border: 1px solid #ccc; padding: 1rem; border-radius: 8px; margin-top: 1rem; }
    .repeat-button { margin-top: 1rem; }
    .subform-item { position: relative; padding-bottom: 2rem; }
    .remove-subfield-btn {
      position: absolute;
      bottom: 0;
      right: 0;
      background-color: #dc3545;
      color: white;
      border: none;
      padding: 4px 8px;
      border-radius: 4px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <div class="form-wrapper">
    <h2>Pilih Form Builder</h2>
    <select id="form-selector">
      <option disabled selected>Memuat daftar form...</option>
    </select>

    <div id="form-container"></div>
  </div>

  <script>
    const apiBase = 'http://localhost:3333';

    async function fetchFormList() {
      const selector = document.getElementById('form-selector');
      try {
        const res = await fetch(`${apiBase}/configuration/formbuilder/list`);
        const json = await res.json();
        selector.innerHTML = '<option disabled selected>Pilih form...</option>';
        json.data.documents.forEach(form => {
          const opt = document.createElement('option');
          opt.value = form._id;
          opt.textContent = form.name;
          selector.appendChild(opt);
        });
      } catch (err) {
        selector.innerHTML = '<option disabled>Error memuat form</option>';
      }
    }

    async function loadFormBuilder(id) {
      const container = document.getElementById('form-container');
      container.innerHTML = '<p>Memuat form...</p>';
      try {
        const res = await fetch(`${apiBase}/configuration/formbuilder/read/${id}`);
        const { data } = await res.json();
        const formHtml = renderFormFromSchema(data);
        container.innerHTML = '';
        container.appendChild(formHtml);
        attachAutoFetch(data, formHtml);
        attachCalculated(formHtml);
      } catch (err) {
        container.innerHTML = '<p>Gagal memuat form</p>';
      }
    }

    function renderFormFromSchema(schema) {
      const form = document.createElement('form');
      form.id = 'dynamic-form';

      const title = document.createElement('h3');
      title.textContent = `Form: ${schema.name}`;
      form.appendChild(title);

      schema.fields.forEach(field => {
        const el = renderField(field, field.name);
        form.appendChild(el);

        if (field.options?.auto_fill) {
          Object.keys(field.options.auto_fill).forEach(targetName => {
            if (!schema.fields.find(f => f.name === targetName)) {
              const ghostField = {
                name: targetName,
                label: targetName.charAt(0).toUpperCase() + targetName.slice(1),
                type: 'number',
                readonly: true
              };
              form.appendChild(renderField(ghostField, targetName));
            }
          });
        }
      });

      schema.subforms.filter(Boolean).forEach(subform => {
        const subContainer = document.createElement('div');
        subContainer.className = 'subform-container';

        const label = document.createElement('h4');
        label.textContent = subform.label;
        subContainer.appendChild(label);

        const listWrapper = document.createElement('div');
        listWrapper.className = 'subform-list';

        const addButton = document.createElement('button');
        addButton.textContent = '+ Tambah Baris';
        addButton.type = 'button';
        addButton.className = 'repeat-button';
        addButton.onclick = () => {
          const group = document.createElement('div');
          group.className = 'subform-item';

          subform.fields.forEach(field => {
            const el = renderField(field, `${subform.table_name}[].${field.name}`);
            group.appendChild(el);

            if (field.options?.auto_fill) {
              Object.entries(field.options.auto_fill).forEach(([targetName, sourceField]) => {
                const exists = subform.fields.some(f => f.name === targetName);
                if (!exists) {
                  const ghostField = {
                    name: targetName,
                    label: targetName.charAt(0).toUpperCase() + targetName.slice(1),
                    type: 'number',
                    readonly: true,
                  };
                  group.appendChild(renderField(ghostField, `${subform.table_name}[].${targetName}`));
                }
              });
            }
          });

          const delBtn = document.createElement('button');
          delBtn.textContent = 'Hapus';
          delBtn.type = 'button';
          delBtn.className = 'remove-subfield-btn';
          delBtn.onclick = () => group.remove();

          group.appendChild(delBtn);
          listWrapper.appendChild(group);

          attachAutoFetch({ fields: subform.fields }, group);
          attachCalculated(group);
        };

        subContainer.appendChild(listWrapper);
        subContainer.appendChild(addButton);
        form.appendChild(subContainer);

        addButton.click();
      });

      return form;
    }

    function renderField(field, name) {
      const group = document.createElement('div');
      group.className = 'form-group';
      const label = document.createElement('label');
      label.textContent = field.label;
      group.appendChild(label);

      if (field.type === 'select') {
        const select = document.createElement('select');
        select.name = name;
        if (field.options?.relation) select.dataset.relation = JSON.stringify(field.options.relation);
        if (field.options?.auto_fill) select.dataset.autofill = JSON.stringify(field.options.auto_fill);
        select.innerHTML = '<option disabled selected>Memuat data...</option>';
        group.appendChild(select);
      } else if (field.type === 'calculated') {
        const input = document.createElement('input');
        input.type = 'text';
        input.name = name;
        input.readOnly = true;
        input.placeholder = field.formula?.formula || '';
        input.dataset.formula = field.formula?.formula || '';
        group.appendChild(input);
      } else {
        const input = document.createElement('input');
        input.type = field.type;
        input.name = name;
        if (field.readonly) input.readOnly = true;
        group.appendChild(input);
      }

      return group;
    }

    function attachAutoFetch(schema, container = document) {
      container.querySelectorAll('select[data-relation]').forEach(select => {
        const relation = JSON.parse(select.dataset.relation);
        if (!relation?.table) return;
        fetch(`${apiBase}/api/${relation.table}`)
          .then(r => r.json())
          .then(data => {
            select.innerHTML = '<option disabled selected>Pilih...</option>';
            data.data.documents.forEach(row => {
              const opt = document.createElement('option');
              opt.value = row[relation.value_column];
              opt.textContent = row[relation.label_column];
              opt.dataset.row = JSON.stringify(row);
              select.appendChild(opt);
            });
            attachAutoFill(container);
          });
      });
    }

    function attachAutoFill(container) {
      container.querySelectorAll('select[data-autofill]').forEach(select => {
        const autofill = JSON.parse(select.dataset.autofill);
        const relation = JSON.parse(select.dataset.relation || '{}');
        if (!relation?.table) return;

        select.addEventListener('change', e => {
          const selected = select.options[select.selectedIndex];
          const rowData = JSON.parse(selected.dataset.row || '{}');
          Object.entries(autofill).forEach(([targetName, sourceField]) => {
            const input = container.querySelector(`[name$='.${targetName}']`);
            if (input) input.value = rowData[sourceField] ?? '';
          });
          attachCalculated(container);
        });
      });
    }

    function attachCalculated(container) {
      container.querySelectorAll('input[data-formula]').forEach(input => {
        const formula = input.dataset.formula;
        const vars = formula.match(/[a-zA-Z0-9_]+/g) || [];
        const updateValue = () => {
          try {
            let val = formula;
            vars.forEach(v => {
              const f = container.querySelector(`[name$='.${v}']`);
              val = val.replaceAll(v, parseFloat(f?.value || 0));
            });
            input.value = eval(val);
          } catch (e) {
            console.warn('Error kalkulasi:', e);
          }
        };
        vars.forEach(v => {
          const el = container.querySelector(`[name$='.${v}']`);
          if (el) el.addEventListener('input', updateValue);
        });
        updateValue();
      });
    }

    document.getElementById('form-selector').addEventListener('change', e => loadFormBuilder(e.target.value));
    fetchFormList();
  </script>
</body>
</html>