@php
// Mengakses properti 'settings' dari field, parse dari string JSON jika perlu
  const parsed_settings = typeof field.settings === 'string' ? JSON.parse(field.settings) : field.settings;
  let display_value = '';

  try {
@switch(field.field_type)
  {{-- Mengakses properti 'field_type' --}}
  @case('Text')
    @case('Number')
      @case('Slider')
        @case('Hash')
          @case('Color')
            // Mengakses properti 'entry_value'
        display_value = entry_value;
            @break
            
            @case('Selection')
              const selection_type = parsed_settings.type || 'Dropdown';
              @switch(selection_type)
                @case('Toggle')
                  display_value = (entry_value === 'true' || entry_value === true) ? 'Ya' : 'Tidak';
                  @break
                  @case('Datetime')
                    display_value = entry_value ? (new Date(entry_value)).toLocaleString() : '';
                    @break
                    @case('Color')
                      display_value = `<span
                        style="background-color: ${entry_value}; display: inline-block; width: 20px; height: 20px; border: 1px solid #ccc; vertical-align: middle;"
                      ></span>${entry_value}`;
                      @break
                      @case('Dropdown')
                        @case('Radio Button')
                          const selected_option = parsed_settings.options?.find(opt => opt.value == entry_value);
            display_value = selected_option ? selected_option.label : entry_value;
                          @break
                          @case('Checkboxes')
                            @case('Dropdown Multiple')
                              // Mengakses properti 'entry_value' yang diharapkan sebagai array string
            const values = Array.isArray(entry_value) ? entry_value : (entry_value ? JSON.parse(entry_value) : []);
            display_value = values.map(val => {
              const opt = parsed_settings.options?.find(o => o.value == val);
              return opt ? opt.label : val;
            }).join(', ');
                              @break
                              @case('Icon')
                                display_value = `<i class="${entry_value}"></i>${entry_value}`;
                                @break
                                @case('Repeater')
                                  // Mengakses properti 'entry_value' yang diharapkan sebagai array objek
            const items = Array.isArray(entry_value) ? entry_value : (entry_value ? JSON.parse(entry_value) : []);
            display_value = items.map((item, idx) => {
                let item_str = '';
                for (const key in item) {
                    item_str += `${key}: ${item[key]} `;
                }
                return `Item ${idx + 1}: ${item_str.trim()}`;
            }).join('<br />');
                                  @break
                                  @default
                                  display_value = String(entry_value || '');
                                @endswitch
                                @break
                                
                                @case('Relational')
                                  const relation_type = parsed_settings.relation_type || 'Many to One';
                                  @switch(relation_type)
                                    @case('Files')
                                      // Mengakses properti 'entry_value' yang diharapkan sebagai array string
            const files = Array.isArray(entry_value) ? entry_value : (entry_value ? JSON.parse(entry_value) : []);
            display_value = files.map((file, idx) => `<a href="${file}" target="_blank">File ${idx + 1}</a>`).join(', ');
                                      @break
                                      @case('Many to One')
                                        @case('Tree View')
                                          // Untuk Many to One, Anda harus ambil nama relasi dari database
            // Untuk demo, kita hanya tampilkan ID
            display_value = `ID Relasi: ${entry_value || ''}`;
                                          @break
                                          @case('One to Many')
                                            @case('Many to Many')
                                              // Mengakses properti 'entry_value' yang diharapkan sebagai array ID
            const related_ids = Array.isArray(entry_value) ? entry_value : (entry_value ? JSON.parse(entry_value) : []);
            display_value = `IDs Relasi: ${related_ids.join(', ')}`;
                                              @break
                                              @default
                                              display_value = String(entry_value || '');
                                            @endswitch
                                            @break
                                            
                                            @default
                                            display_value = String(entry_value || '');
    }
  } catch (e) {
    display_value = `Error: ${e.message}`;
  }
                                          @endphp
                                          {{{ display_value }}}
